/* Autogenerated using generate_ast.py, DO NOT EDIT. */
#pragma once

#include <any>
#include <memory>
#include "Scanner.h"

namespace lox
{
class Binary;
class Grouping;
class Literal;
class Unary;
class Variable;

class ExprVisitor
{
public:
    virtual std::any VisitBinaryExpr(Binary& expr) = 0;
    virtual std::any VisitGroupingExpr(Grouping& expr) = 0;
    virtual std::any VisitLiteralExpr(Literal& expr) = 0;
    virtual std::any VisitUnaryExpr(Unary& expr) = 0;
    virtual std::any VisitVariableExpr(Variable& expr) = 0;
}; // end Visitor

class Expr
{
public:
    virtual ~Expr() = default;
    virtual std::any Accept(ExprVisitor& visitor) = 0;
}; // end Expr

class Binary : public Expr
{
public:
    Binary() = default;
    ~Binary() = default;
    Binary(const Binary&) = default;
    Binary& operator=(const Binary&) = default;
    Binary(Binary&&) = default;
    Binary& operator=(Binary&&) = default;

    Binary(std::shared_ptr<Expr> left_, Token op_, std::shared_ptr<Expr> right_) : 
        left(left_),
        op(op_),
        right(right_)
    {

    }

    std::any Accept(ExprVisitor& visitor) final
    {
        return visitor.VisitBinaryExpr(*this);
    }

    std::shared_ptr<Expr> left;
    Token op;
    std::shared_ptr<Expr> right;
}; // end Binary

class Grouping : public Expr
{
public:
    Grouping() = default;
    ~Grouping() = default;
    Grouping(const Grouping&) = default;
    Grouping& operator=(const Grouping&) = default;
    Grouping(Grouping&&) = default;
    Grouping& operator=(Grouping&&) = default;

    Grouping(std::shared_ptr<Expr> expression_) : 
        expression(expression_)
    {

    }

    std::any Accept(ExprVisitor& visitor) final
    {
        return visitor.VisitGroupingExpr(*this);
    }

    std::shared_ptr<Expr> expression;
}; // end Grouping

class Literal : public Expr
{
public:
    Literal() = default;
    ~Literal() = default;
    Literal(const Literal&) = default;
    Literal& operator=(const Literal&) = default;
    Literal(Literal&&) = default;
    Literal& operator=(Literal&&) = default;

    Literal(std::any value_) : 
        value(value_)
    {

    }

    std::any Accept(ExprVisitor& visitor) final
    {
        return visitor.VisitLiteralExpr(*this);
    }

    std::any value;
}; // end Literal

class Unary : public Expr
{
public:
    Unary() = default;
    ~Unary() = default;
    Unary(const Unary&) = default;
    Unary& operator=(const Unary&) = default;
    Unary(Unary&&) = default;
    Unary& operator=(Unary&&) = default;

    Unary(Token op_, std::shared_ptr<Expr> right_) : 
        op(op_),
        right(right_)
    {

    }

    std::any Accept(ExprVisitor& visitor) final
    {
        return visitor.VisitUnaryExpr(*this);
    }

    Token op;
    std::shared_ptr<Expr> right;
}; // end Unary

class Variable : public Expr
{
public:
    Variable() = default;
    ~Variable() = default;
    Variable(const Variable&) = default;
    Variable& operator=(const Variable&) = default;
    Variable(Variable&&) = default;
    Variable& operator=(Variable&&) = default;

    Variable(Token name_) : 
        name(name_)
    {

    }

    std::any Accept(ExprVisitor& visitor) final
    {
        return visitor.VisitVariableExpr(*this);
    }

    Token name;
}; // end Variable
} // end lox