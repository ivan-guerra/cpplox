/* Autogenerated using generate_ast.py, DO NOT EDIT. */
#pragma once

#include <string>
#include <memory>

#include "Scanner.h"

namespace lox
{
template <typename VisitorImpl, typename VisitablePtr, typename ResultType>
class ValueGetter
{
public:
    static ResultType GetValue(VisitablePtr n)
    {
        VisitorImpl visitor;
        n->Accept(visitor);
        return visitor.value_;
    }

    void Return(ResultType value)
    {
        value_ = value;
    }
private:
    ResultType value_;
}; // end ValueGetter

class Binary;
class Grouping;
class Literal;
class Unary;

class Visitor
{
public:
    virtual void VisitBinaryExpr(Binary& expr) = 0;
    virtual void VisitGroupingExpr(Grouping& expr) = 0;
    virtual void VisitLiteralExpr(Literal& expr) = 0;
    virtual void VisitUnaryExpr(Unary& expr) = 0;
}; // end Visitor

class Expr
{
public:
    virtual ~Expr() = default;
    virtual void Accept(Visitor& visitor) = 0;
}; // end Expr

class Binary : public Expr
{
public:
    Binary(std::shared_ptr<Expr> left, Token op, std::shared_ptr<Expr> right) : 
        left(left),
        op(op),
        right(right)
    {

    }

    void Accept(Visitor& visitor) final
    {
        visitor.VisitBinaryExpr(*this);
    }

    std::shared_ptr<Expr> left;
    Token op;
    std::shared_ptr<Expr> right;
}; // end Binary

class Grouping : public Expr
{
public:
    Grouping(std::shared_ptr<Expr> expression) : 
        expression(expression)
    {

    }

    void Accept(Visitor& visitor) final
    {
        visitor.VisitGroupingExpr(*this);
    }

    std::shared_ptr<Expr> expression;
}; // end Grouping

class Literal : public Expr
{
public:
    Literal(std::string value) : 
        value(value)
    {

    }

    void Accept(Visitor& visitor) final
    {
        visitor.VisitLiteralExpr(*this);
    }

    std::string value;
}; // end Literal

class Unary : public Expr
{
public:
    Unary(Token op, std::shared_ptr<Expr> right) : 
        op(op),
        right(right)
    {

    }

    void Accept(Visitor& visitor) final
    {
        visitor.VisitUnaryExpr(*this);
    }

    Token op;
    std::shared_ptr<Expr> right;
}; // end Unary
} // end lox